Notes
=====

LECTURE: Android History
LECTURE: Stack Overview
LECTURE: Hello, World

LECTURE: Architecting Android Apps, up to UI
LECTURE: Android UI: User Interface

DEMO: Status Activity Layout::
Create StatusActivity layout file, using Relative Layout, a button and an edit text.


LAB: Status Activity Layout::
Add EditText to Status Activity layout, setup its height, width, id, and hint.
Position it below the button, and have it take entire remaining screen space.


LAB: Status Activity Landscape Layout::
Create a landscape version of status layout.
Hint: 
. Use File->New->Android XML File tool.
. Create new layout in /res/layout-land/activity_status.xml.
. Qualify it for _Orientation_ qualifier
. Start by copying the content of default status layout.


LECTURE: Android UI: UI Events

DEMO: Implement onClickListener for the update button::
Add the Java binding to handle the update button.


LAB: Handling UI Events::
. Add a TextView with id text_count to Status Activity. (hint: don't forget to update landscape layout as well!).
. Add a TextWatcher listener to editStatus and update textCount when as user types.
. Tell user how many characters are left, assuming we have 140 total.


DEMO: Adding the YambaClient jar to the project.

DEMO: Async Task

DEMO: Adding Internet permissions

LAB: Add a Dialog while posting::
Hint: Use http://developer.android.com/reference/android/app/ProgressDialog.html[ProgressDialog]
Use AsyncTask's callbacks to start/stop the progress dialog.

Homework
-------

Review FastTrack to Java chapters on:

* Object Oriented Programing
* Packaging

Watch:

* http://mrkn.co/f/595[Eclipse Video]


Resources
---------

https://github.com/marakana/class-2683/raw/master/CiscoYamba/libs/yambaclientlib.jar[YambaClientLib.jar]

http://software.intel.com/en-us/articles/intel-hardware-accelerated-execution-manager/[Intel HAXM]